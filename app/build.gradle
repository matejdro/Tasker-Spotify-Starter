apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "com.matejdro.taskerspotifystarter"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 6
        versionName "3.0.0-alpha1"

        def spotifyProperties = new Properties()
        spotifyProperties.load(new FileInputStream(rootProject.file("spotify.properties")))
        buildConfigField("String", "SPOTIFY_API_KEY", '"' + spotifyProperties["api_key"] + '"')
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.android.support:design:26.0.2'
    compile 'com.android.support:recyclerview-v7:26.0.2'

    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.3'
    compile 'com.jakewharton.rxrelay2:rxrelay:2.0.0'

    compile 'com.spotify.android:auth:1.0.0-alpha'
    compile 'com.android.support:customtabs:26.0.2'

    compile 'com.github.kaaes:spotify-web-api-android:0.4.1'

    compile "android.arch.lifecycle:runtime:1.0.0-alpha9"
    compile "android.arch.lifecycle:extensions:1.0.0-alpha9"
    compile "android.arch.lifecycle:reactivestreams:1.0.0-alpha9"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0-alpha9"

    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.23.4'

    compile project(':spotify-app-remote')
}


allprojects {
    afterEvaluate { project ->
        def keystoreProperties = rootProject.file('debugkeystore.properties')
        def debugConfig = 'debug'

        if (keystoreProperties.exists() && android.signingConfigs.hasProperty(debugConfig)) {
            def props = new Properties()
            props.load(new FileInputStream(keystoreProperties))
            android.signingConfigs[debugConfig].storeFile = file(props['storeFile'])
            android.signingConfigs[debugConfig].storePassword = props['storePassword']
            android.signingConfigs[debugConfig].keyAlias = props['keyAlias']
            android.signingConfigs[debugConfig].keyPassword = props['keyPassword']
        }
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}